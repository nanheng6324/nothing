#include "pch.h"
#include <iostream>
#include <conio.h>
#include <stdio.h>
#include <string>
#include <exception>
using namespace std;

struct BinaryTreeNode 
{
	int m_nValue;
	BinaryTreeNode* m_pLeft;
	BinaryTreeNode* m_pRight;
};

BinaryTreeNode* ConstructCore(int* startPreorder, int* endPreorder, int* startInorder, int* endInorder);
BinaryTreeNode* Construct(int* preorder, int* inorder, int length)
{
	if (preorder == nullptr || inorder == nullptr || length <= 0)
		return nullptr;
	return ConstructCore(preorder, preorder + length - 1, inorder, inorder + length - 1);
}
BinaryTreeNode* ConstructCore(int* startPreorder, int* endPreorder, int* startInorder, int* endInorder)
{
	int rootValue = startPreorder[0];
	BinaryTreeNode* root = new BinaryTreeNode();
	root->m_nValue = rootValue;
	root->m_pLeft = nullptr;
	root->m_pRight = nullptr;
	
	if (startPreorder == endPreorder)
	{
		if (startInorder == endInorder && *startPreorder == *startInorder)
			return root;
		else
			throw std::exception("Invalid input.");
	}
	int* rootInorder = startInorder;
	while (rootInorder <= endInorder && *rootInorder != rootValue)
		++rootInorder;//找
	if (rootInorder == endInorder && *rootInorder != rootValue)
		throw std::exception("Invalid input.");//找到最后判断边界
	//构建子树
	int LeftLength = rootInorder - startInorder;
	int *LeftPreorderEnd = startPreorder + LeftLength;
	if (LeftLength > 0)
	{
		root->m_pLeft = ConstructCore(startPreorder + 1, LeftPreorderEnd, startInorder, rootInorder - 1);
	}
	if (LeftLength < endPreorder - startPreorder)
	{
		root->m_pRight= ConstructCore(LeftPreorderEnd+1, endPreorder, rootInorder+1, endInorder);
	}
	return root;
}
//void test(int *a)
//{
//	int* p = a;
//	
//	cout << p <<' '<< *p <<' '<< a <<' '<< *a << endl;
//	p++;
//	cout << p << ' ' << *p << ' ' << a << ' ' << *a << endl;
//}
int main()
{
	const int length = 8;
	int preorder[length] = { 1,2,4,7,3,5,6,8 };
	int inorder[length] = { 4,7,2,1,5,3,8,6 };
	
	try
	{
		BinaryTreeNode* root = Construct(preorder, inorder, length);
		cout << root->m_nValue << ' ' << root->m_pLeft->m_nValue << ' ' << root->m_pRight->m_nValue << endl;

	}
	catch (std::exception& exception)
	{
		printf("Invalid Input.\n");
	}
	
	
}
